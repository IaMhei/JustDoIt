#!/bin/sh

debug=1

. /usr/share/libubox/jshn.sh
. /lib/functions.sh
. /lib/functions/network.sh

print()
{
    logger ${debug:+-s} -p 6 -t DNSPOD[$$] "$*"
}

get_ip_info()
{
    local args
    local data
    
    append args "-s"
    append args "--retry 30"
    append args "-X GET http://ipinfo.io"
    [ -n "$1" ] && append args "--interface $3"
    data=$(eval "/usr/bin/curl $args")
    
    if [ -z $data ]; then
        print "data is null"
        return 1
    else 
        json_cleanup
        json_set_namespace "IPINFO"
        json_init
        json_load "$data"
        json_get_vars ip hostname city region country loc org
        print "To obtain an IP address from ip.3322.org is $ip"
    fi
}

get()
{
    # The first parameter is the API action, $1='Info.Version'
    # The second parameter is the API private parameter, Such as $2='domain_id=1234567'
    local args
    local data
        
    append args "-k" 
    append args "-s"
    append args "--output '/tmp/dnspod.json'"
    append args "--retry 30"
    append args "-A '$USER_AGENT'"
    append args "-X POST $API_ADDR$1"
    append args "-d '$public_parameter$2'"
    [ -n "$3" ] && append args "--interface $3"  
        
    eval "/usr/bin/curl $args"
    data=$(cat /tmp/dnspod.json)
    
    if [ -n "$data" ]; then
        json_cleanup
        json_set_namespace "DNSPOD"
        json_init
        json_load "$data"
        json_select status
        json_get_vars code message

        if [ "$code" == "1" ]; then
            json_select ".."
        else
            print "ERROR: $message"
        fi
    else
        print "The $1 get data is empty."
    fi
}

get_record()
{
    local D_NAME
    local id
    local name
    local line
    local type
    local value
    local enabled
    local updated_on

    if [ -z "$1" -o -z "$2" ]; then 
        print "Domain_id or Record_id don't empty"
    else
        get 'Record.Info' "&domain_id=$1&record_id=$2"

        json_select domain
        json_get_var D_NAME domain
        json_select ".."

        json_select record
        json_get_vars id sub_domain record_line record_type value enabled updated_on

        local i=0
   	local r_name
   
        while [ "$record_type" == "A" ]; do
            r_name=$(/sbin/uci -q get dnspod.@record[$i].record_name)
       
            if [ -n "$r_name" -a "$r_name" == "$sub_domain" ]; then
                uci set dnspod.@record[$i].record_id="$2"
                uci set dnspod.@record[$i].record_line="$record_line"
                uci set dnspod.@record[$i].record_type="$record_type"
                uci set dnspod.@record[$i].record_value="$value"
                uci set dnspod.@record[$i].record_enabled="$enabled"
                uci set dnspod.@record[$i].record_updated_on="$updated_on"
                uci set dnspod.@record[$i].domain_id="$1"
                uci set dnspod.@record[$i].domain_name="$D_NAME"
            	break
            elif [ -z "$r_name" ]; then
               	break
            fi
            let ++i
       	done
       	uci commit
    fi
}

update_record()
{
    local IFACE
    local R_NAME
    local IP
    local DEVICE
    local R_ID
    local R_LINE
    local R_ENABLED
    local STR 
    
    config_get IFNAME "$1" interface
    config_get R_NAME "$1" record_name
    
    network_get_ipaddr IP $IFNAME
    network_get_device DEVICE $IFNAME
    
    if [ -n "$R_NAME" ]; then
        get 'Record.List' "&domain_id=$D_ID&sub_domain=$R_NAME"
    
        json_select "records"
        json_select "1"
        json_get_var R_ID id
        json_get_var R_IP value
        json_get_var R_LINE line
        json_get_var R_ENABLED enabled
            
        if [ "$R_ENABLED" == "1" ]; then
            if [ "$IP" != "$R_IP" -a -n "$DEVICE" ]; then
                STR="&domain_id=$D_ID&record_id=$R_ID&record_line=${R_LINE:-'\u9ed8\u8ba4'}&sub_domain=$R_NAME"
                get 'Record.Ddns' $STR $DEVICE
                json_select "record"
                json_get_vars name value
                print "$name -> $value"
            else
                print "Network interface does not exist or IP address has not changed"
            fi
            get_record $D_ID $R_ID
        fi
    fi 
}

if [ ! -f /etc/cacert.pem ]; then
    /usr/bin/wget -c -P /etc http://curl.haxx.se/ca/cacert.pem && print "Download the certificate file successfully."                                                                            
fi

if [ ! -x /usr/bin/curl ]; then
    print "curl: not found"
    exit 0
fi

config_clear                                                                           
config_load 'dnspod'                                                                   
 
config_get_bool ENABLED config enabled '1'
if [ "$ENABLED" -eq 0 ]; then
    print "DNSPOD not open automatically updated,Please enabled set to 1" 
    exit 0
fi

config_get LANG 'config' 'lang' 'cn'
config_get FORMAT 'config' 'format' 'json'
config_get USER_AGENT 'config' 'useragent' 'DNSPOD for OpenWRT/1.1.0(iamhei@qq.com)'
config_get API_ADDR 'config' 'api_addr' 'https://dnsapi.cn/'
config_get USERNAME 'config' 'username'
config_get PASSWORD 'config' 'password'

if [ -z "$USERNAME" -o -z "$PASSWORD" ]; then
    print "User and Password can't be empty,Please set username and password"
    exit 0
fi 

public_parameter="login_email=$USERNAME&login_password=$PASSWORD&format=$FORMAT&lang=$LANG" 

get 'Info.Version'
json_select "status"
json_get_var CURR_VER message

if [ "$CURR_VER" != "4.6" ]; then
    print "The API version is not supported, Please contact the iamhei@qq.com to be updated." 
    exit 0
fi

get 'Domain.List'
json_select info
json_get_var NUM domain_total
json_select ".."

json_select domains

local i=1
local NUM
local D_NAME
while [ $i -le $NUM ]
do
    json_select "$i"
    json_get_var D_ID id
    json_get_var D_NAME name
    config_foreach update_record record
    json_select ".."
    let ++i
done
